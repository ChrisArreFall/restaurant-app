{"ast":null,"code":"export default function MQTTClient() {\n  var options = {\n    clientId: \"mqttjs01\",\n    username: \"steve\",\n    password: \"password\",\n    clean: true\n  }; // Create a client instance\n\n  var client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\"); // set callback handlers\n\n  client.onConnectionLost = onConnectionLost;\n  client.onMessageArrived = onMessageArrived; // connect the client\n\n  client.connect({\n    onSuccess: onConnect\n  }); // called when the client connects\n\n  function onConnect() {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onConnect\");\n    client.subscribe(\"World\");\n    message = new Paho.MQTT.Message(\"Hello\");\n    message.destinationName = \"World\";\n    client.send(message);\n  } // called when the client loses its connection\n\n\n  function onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n    }\n  } // called when a message arrives\n\n\n  function onMessageArrived(message) {\n    console.log(\"onMessageArrived:\" + message.payloadString);\n  }\n\n  return client;\n}","map":{"version":3,"sources":["/Users/chris/Documents Local/SOA/Proyecto1/restaurantApp/restaurant-app/src/mqtt/index.js"],"names":["MQTTClient","options","clientId","username","password","clean","client","Paho","MQTT","Client","location","hostname","Number","port","onConnectionLost","onMessageArrived","connect","onSuccess","onConnect","console","log","subscribe","message","Message","destinationName","send","responseObject","errorCode","errorMessage","payloadString"],"mappings":"AAEA,eAAe,SAASA,UAAT,GAAsB;AACjC,MAAIC,OAAO,GAAC;AACRC,IAAAA,QAAQ,EAAC,UADD;AAERC,IAAAA,QAAQ,EAAC,OAFD;AAGRC,IAAAA,QAAQ,EAAC,UAHD;AAIRC,IAAAA,KAAK,EAAC;AAJE,GAAZ,CADiC,CAQjC;;AACA,MAAIC,MAAM,GAAG,IAAIC,IAAI,CAACC,IAAL,CAAUC,MAAd,CAAqBC,QAAQ,CAACC,QAA9B,EAAwCC,MAAM,CAACF,QAAQ,CAACG,IAAV,CAA9C,EAA+D,UAA/D,CAAb,CATiC,CAWjC;;AACAP,EAAAA,MAAM,CAACQ,gBAAP,GAA0BA,gBAA1B;AACAR,EAAAA,MAAM,CAACS,gBAAP,GAA0BA,gBAA1B,CAbiC,CAejC;;AACAT,EAAAA,MAAM,CAACU,OAAP,CAAe;AAACC,IAAAA,SAAS,EAACC;AAAX,GAAf,EAhBiC,CAmBjC;;AACA,WAASA,SAAT,GAAqB;AACrB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAd,IAAAA,MAAM,CAACe,SAAP,CAAiB,OAAjB;AACAC,IAAAA,OAAO,GAAG,IAAIf,IAAI,CAACC,IAAL,CAAUe,OAAd,CAAsB,OAAtB,CAAV;AACAD,IAAAA,OAAO,CAACE,eAAR,GAA0B,OAA1B;AACAlB,IAAAA,MAAM,CAACmB,IAAP,CAAYH,OAAZ;AACC,GA3BgC,CA6BjC;;;AACA,WAASR,gBAAT,CAA0BY,cAA1B,EAA0C;AAC1C,QAAIA,cAAc,CAACC,SAAf,KAA6B,CAAjC,EAAoC;AAChCR,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBM,cAAc,CAACE,YAA/C;AACH;AACA,GAlCgC,CAoCjC;;;AACA,WAASb,gBAAT,CAA0BO,OAA1B,EAAmC;AACnCH,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBE,OAAO,CAACO,aAAxC;AACC;;AAED,SAAOvB,MAAP;AACH","sourcesContent":["\n\nexport default function MQTTClient() {\n    var options={\n        clientId:\"mqttjs01\",\n        username:\"steve\",\n        password:\"password\",\n        clean:true\n    };\n    \n    // Create a client instance\n    var client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\n    \n    // set callback handlers\n    client.onConnectionLost = onConnectionLost;\n    client.onMessageArrived = onMessageArrived;\n    \n    // connect the client\n    client.connect({onSuccess:onConnect});\n    \n    \n    // called when the client connects\n    function onConnect() {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onConnect\");\n    client.subscribe(\"World\");\n    message = new Paho.MQTT.Message(\"Hello\");\n    message.destinationName = \"World\";\n    client.send(message);\n    }\n    \n    // called when the client loses its connection\n    function onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n        console.log(\"onConnectionLost:\"+responseObject.errorMessage);\n    }\n    }\n    \n    // called when a message arrives\n    function onMessageArrived(message) {\n    console.log(\"onMessageArrived:\"+message.payloadString);\n    }\n    \n    return client\n}"]},"metadata":{},"sourceType":"module"}