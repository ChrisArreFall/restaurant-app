{"ast":null,"code":"import Paho from 'paho-mqtt';\nexport default function MQTTClient() {\n  const client = new Paho.MQTT.Client(\"soldier.cloudmqtt.com\", 33111, \"web_\" + parseInt(Math.random() * 100, 10));\n  var options = {\n    useSSL: true,\n    userName: \"username\",\n    password: \"password\",\n    onSuccess: onConnect,\n    onFailure: doFail,\n    keepalive: 1000 * 3600 * 24\n  }; // connect the client\n\n  client.connect(options); // called when the client connects\n\n  function onConnect() {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onConnect\");\n    client.subscribe(\"/cloudmqtt\");\n    message = new Paho.MQTT.Message(\"Hello CloudMQTT\");\n    message.destinationName = \"/cloudmqtt\";\n    client.send(message);\n  }\n\n  function doFail(e) {\n    console.log(e);\n  } // called when the client loses its connection\n\n\n  function onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n    }\n  } // called when a message arrives\n\n\n  function onMessageArrived(message) {\n    console.log(\"onMessageArrived:\" + message.payloadString);\n  }\n}","map":{"version":3,"sources":["/Users/chris/Documents Local/SOA/Proyecto1/restaurantApp/restaurant-app/src/mqtt.js"],"names":["Paho","MQTTClient","client","MQTT","Client","parseInt","Math","random","options","useSSL","userName","password","onSuccess","onConnect","onFailure","doFail","keepalive","connect","console","log","subscribe","message","Message","destinationName","send","e","onConnectionLost","responseObject","errorCode","errorMessage","onMessageArrived","payloadString"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,eAAe,SAASC,UAAT,GAAsB;AACjC,QAAMC,MAAM,GAAG,IAAIF,IAAI,CAACG,IAAL,CAAUC,MAAd,CAAqB,uBAArB,EAA8C,KAA9C,EAAqD,SAASC,QAAQ,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,EAAsB,EAAtB,CAAtE,CAAf;AAEA,MAAIC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,IADM;AAEdC,IAAAA,QAAQ,EAAE,UAFI;AAGdC,IAAAA,QAAQ,EAAE,UAHI;AAIdC,IAAAA,SAAS,EAACC,SAJI;AAKdC,IAAAA,SAAS,EAACC,MALI;AAMdC,IAAAA,SAAS,EAAC,OAAO,IAAP,GAAc;AANV,GAAd,CAHiC,CAajC;;AACAd,EAAAA,MAAM,CAACe,OAAP,CAAeT,OAAf,EAdiC,CAgBjC;;AACA,WAASK,SAAT,GAAqB;AACrB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAjB,IAAAA,MAAM,CAACkB,SAAP,CAAiB,YAAjB;AACAC,IAAAA,OAAO,GAAG,IAAIrB,IAAI,CAACG,IAAL,CAAUmB,OAAd,CAAsB,iBAAtB,CAAV;AACAD,IAAAA,OAAO,CAACE,eAAR,GAA0B,YAA1B;AACArB,IAAAA,MAAM,CAACsB,IAAP,CAAYH,OAAZ;AACC;;AAED,WAASN,MAAT,CAAgBU,CAAhB,EAAkB;AAClBP,IAAAA,OAAO,CAACC,GAAR,CAAYM,CAAZ;AACC,GA5BgC,CA8BjC;;;AACA,WAASC,gBAAT,CAA0BC,cAA1B,EAA0C;AAC1C,QAAIA,cAAc,CAACC,SAAf,KAA6B,CAAjC,EAAoC;AAChCV,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBQ,cAAc,CAACE,YAA/C;AACH;AACA,GAnCgC,CAqCjC;;;AACA,WAASC,gBAAT,CAA0BT,OAA1B,EAAmC;AACnCH,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAoBE,OAAO,CAACU,aAAxC;AACC;AACJ","sourcesContent":["import Paho from 'paho-mqtt'\nexport default function MQTTClient() {\n    const client = new Paho.MQTT.Client(\"soldier.cloudmqtt.com\", 33111, \"web_\" + parseInt(Math.random() * 100, 10));\n\n    var options = {\n    useSSL: true,\n    userName: \"username\",\n    password: \"password\",\n    onSuccess:onConnect,\n    onFailure:doFail,\n    keepalive:1000 * 3600 * 24\n    }\n\n\n    // connect the client\n    client.connect(options);\n\n    // called when the client connects\n    function onConnect() {\n    // Once a connection has been made, make a subscription and send a message.\n    console.log(\"onConnect\");\n    client.subscribe(\"/cloudmqtt\");\n    message = new Paho.MQTT.Message(\"Hello CloudMQTT\");\n    message.destinationName = \"/cloudmqtt\";\n    client.send(message);\n    }\n\n    function doFail(e){\n    console.log(e);\n    }\n\n    // called when the client loses its connection\n    function onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n        console.log(\"onConnectionLost:\"+responseObject.errorMessage);\n    }\n    }\n\n    // called when a message arrives\n    function onMessageArrived(message) {\n    console.log(\"onMessageArrived:\"+message.payloadString);\n    }\n}"]},"metadata":{},"sourceType":"module"}