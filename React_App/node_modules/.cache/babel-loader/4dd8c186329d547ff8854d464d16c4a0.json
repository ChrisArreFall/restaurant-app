{"ast":null,"code":"import Paho from 'paho-mqtt';\nexport default function MQTTClient() {\n  init({\n    size: 10000,\n    storageBackend: AsyncStorage,\n    defaultExpires: 1000 * 3600 * 24,\n    enableCache: true,\n    reconnect: true,\n    sync: {}\n  });\n\n  function onConnect() {\n    console.log(\"onConnect\");\n    const topic = \"imagine/acuario\";\n    client.subscribe(topic);\n    message = new Paho.MQTT.Message(\"apagarluz,0,\");\n    message.destinationName = topic;\n    client.send(message);\n  }\n\n  function onConnectionLost(responseObject) {\n    if (responseObject.errorCode !== 0) {\n      console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n    }\n  }\n\n  function onMessageArrived(message) {\n    console.log(\"onMessageArrived:\" + message.payloadString);\n  }\n\n  function doFail(e) {\n    console.log('error', e);\n  }\n\n  const client = new Paho.MQTT.Client('m10.cloudmqtt.com', 32692, \"web_\" + parseInt(Math.random() * 100, 10));\n  client.onConnectionLost = onConnectionLost;\n  client.onMessageArrived = onMessageArrived;\n  const options = {\n    useSSL: true,\n    userName: \"kfmxnwjy\",\n    password: \"KG_sRW8_RVpw\",\n    onSuccess: onConnect,\n    onFailure: doFail\n  };\n  client.connect(options);\n  return client;\n}","map":{"version":3,"sources":["/Users/chris/Documents Local/SOA/Proyecto1/restaurantApp/restaurant-app/src/mqtt.js"],"names":["Paho","MQTTClient","init","size","storageBackend","AsyncStorage","defaultExpires","enableCache","reconnect","sync","onConnect","console","log","topic","client","subscribe","message","MQTT","Message","destinationName","send","onConnectionLost","responseObject","errorCode","errorMessage","onMessageArrived","payloadString","doFail","e","Client","parseInt","Math","random","options","useSSL","userName","password","onSuccess","onFailure","connect"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,eAAe,SAASC,UAAT,GAAsB;AACjCC,EAAAA,IAAI,CAAC;AACHC,IAAAA,IAAI,EAAE,KADH;AAEHC,IAAAA,cAAc,EAAEC,YAFb;AAGHC,IAAAA,cAAc,EAAE,OAAO,IAAP,GAAc,EAH3B;AAIHC,IAAAA,WAAW,EAAE,IAJV;AAKHC,IAAAA,SAAS,EAAE,IALR;AAMHC,IAAAA,IAAI,EAAG;AANJ,GAAD,CAAJ;;AASA,WAASC,SAAT,GAAqB;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAEA,UAAMC,KAAK,GAAG,iBAAd;AACAC,IAAAA,MAAM,CAACC,SAAP,CAAiBF,KAAjB;AACAG,IAAAA,OAAO,GAAG,IAAIhB,IAAI,CAACiB,IAAL,CAAUC,OAAd,CAAsB,cAAtB,CAAV;AACAF,IAAAA,OAAO,CAACG,eAAR,GAA0BN,KAA1B;AACAC,IAAAA,MAAM,CAACM,IAAP,CAAYJ,OAAZ;AACD;;AAED,WAASK,gBAAT,CAA0BC,cAA1B,EAA0C;AACxC,QAAIA,cAAc,CAACC,SAAf,KAA6B,CAAjC,EAAoC;AAClCZ,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBU,cAAc,CAACE,YAAjD;AACD;AACF;;AAED,WAASC,gBAAT,CAA0BT,OAA1B,EAAmC;AACjCL,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,OAAO,CAACU,aAA1C;AACD;;AAED,WAASC,MAAT,CAAgBC,CAAhB,EAAkB;AAChBjB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBgB,CAArB;AACD;;AAED,QAAMd,MAAM,GAAG,IAAId,IAAI,CAACiB,IAAL,CAAUY,MAAd,CAAqB,mBAArB,EAA0C,KAA1C,EAAiD,SAASC,QAAQ,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,EAAsB,EAAtB,CAAlE,CAAf;AACAlB,EAAAA,MAAM,CAACO,gBAAP,GAA0BA,gBAA1B;AACAP,EAAAA,MAAM,CAACW,gBAAP,GAA0BA,gBAA1B;AAEA,QAAMQ,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,IADM;AAEdC,IAAAA,QAAQ,EAAE,UAFI;AAGdC,IAAAA,QAAQ,EAAE,cAHI;AAIdC,IAAAA,SAAS,EAAE3B,SAJG;AAKd4B,IAAAA,SAAS,EAAEX;AALG,GAAhB;AAQAb,EAAAA,MAAM,CAACyB,OAAP,CAAeN,OAAf;AAEA,SAAOnB,MAAP;AACD","sourcesContent":["import Paho from 'paho-mqtt'\nexport default function MQTTClient() {\n    init({\n      size: 10000,\n      storageBackend: AsyncStorage,\n      defaultExpires: 1000 * 3600 * 24,\n      enableCache: true,\n      reconnect: true,\n      sync : {}\n    });\n    \n    function onConnect() {\n      console.log(\"onConnect\");\n  \n      const topic = \"imagine/acuario\"\n      client.subscribe(topic);\n      message = new Paho.MQTT.Message(\"apagarluz,0,\");\n      message.destinationName = topic;\n      client.send(message);\n    }\n    \n    function onConnectionLost(responseObject) {\n      if (responseObject.errorCode !== 0) {\n        console.log(\"onConnectionLost:\" + responseObject.errorMessage);\n      }\n    }\n    \n    function onMessageArrived(message) {\n      console.log(\"onMessageArrived:\" + message.payloadString);\n    }\n  \n    function doFail(e){\n      console.log('error', e);\n    }\n    \n    const client = new Paho.MQTT.Client('m10.cloudmqtt.com', 32692, \"web_\" + parseInt(Math.random() * 100, 10));\n    client.onConnectionLost = onConnectionLost;\n    client.onMessageArrived = onMessageArrived;\n  \n    const options = {\n      useSSL: true,\n      userName: \"kfmxnwjy\",\n      password: \"KG_sRW8_RVpw\",\n      onSuccess: onConnect,\n      onFailure: doFail\n    };\n  \n    client.connect(options);\n    \n    return client\n  }"]},"metadata":{},"sourceType":"module"}